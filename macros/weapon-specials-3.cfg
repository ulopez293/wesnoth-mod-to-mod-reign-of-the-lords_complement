# loner
# explosive
# mind contROL (WIP)
# ceaseless
# Li'sar Initiative


#define ABILITY_LONER
    [leadership]
        id=ROLloner
        value=50
        cumulative=yes
        name= _ "loner"
        female_name= _ "female^loner"
        description= _ "This units attacks are increased by 50% when it is at least one hexe from any allied unit."
        affect_self=yes
            [filter]
                [filter_adjacent]
					 is_enemy=no
					 count=0
				[/filter_adjacent]
            [/filter]
    [/leadership]
#enddef

#define INCORPORATE_EFFECTS
    {VARIABLE damage $damage_inflicted}
    {VARIABLE_OP damage multiply 100}
    [set_variable]
        name=resistance
        to_variable=second_unit.resistance.$weapon.type
    [/set_variable]
    [if]
        [variable]
            name=resistance
            greater_than=0
        [/variable]
        [else]
            {VARIABLE resistance 100}
        [/else]
    [/if]
    {VARIABLE_OP damage divide $resistance}
    {CLEAR_VARIABLE resistance}
#enddef

#define SPECIAL_NOTES_EXPLOSIVE
    _"A strike with the explosive special damages all units adjacent to both the attacker and defender with 1/3 the damage hit."#enddef

#define WEAPON_SPECIAL_EXPLOSIVE
    [dummy]
        id=ROL_explosive
        name= _ "explosive"
		name_inactive= _ "explosive"
        description= _ "When this unit strikes during offense, units that are adjacent to both attacker and defender at the same time are hurt aswell for a 1/3 of the damage. If the attacker is slowed, units adjacent to both attacker and defender will get hurt for 1/4 of the damage instead."
    	active_on=offense
	[/dummy]
[/specials]
[/attack]
	[event]
		name=attacker_hits
		first_time_only=no
		id=ROL_explosive_event
		[filter_attack]
			special=ROL_explosive
		[/filter_attack]
		{INCORPORATE_EFFECTS}
		[store_unit]
			variable=loc_store
			[filter]
				[filter_adjacent]
					x,y=$x2,$y2
				[/filter_adjacent]
				[filter_adjacent]
					x,y=$x1,$y1
				[/filter_adjacent]
			[/filter]
		[/store_unit]
		[store_unit]
			variable=unit_with_explosive
			[filter]
				id=$unit.id
			[/filter]
		[/store_unit]
		# Grab the attack's raw power and attack type - changed to get it from automatically stored variables
		{VARIABLE tmp_explosive_damage $weapon.damage}
		{VARIABLE tmp_explosive_attack_type $weapon.type}
		# Divide by three; four if the user is slowed
		[if]
			[variable]
				name=unit_with_explosive.status.slowed
				not_equals=yes
			[/variable]
			[then]
				[set_variable]
					name=tmp_explosive_damage
					divide=3
				[/set_variable]
			[/then]
			[else]
				[set_variable]
					name=tmp_explosive_damage
					divide=4
				[/set_variable]
			[/else]
		[/if]
		# Round down
		[set_variable]
			name=tmp_explosive_damage
			round=floor
		[/set_variable]
		# Deal the damage
		[switch]
			variable=loc_store.length
			[case]
				value=1
				{EXPLOSIVE_DAMAGE_HEX 0}
			[/case]
			[case]
				value=2
				{EXPLOSIVE_DAMAGE_HEX 1}
				{EXPLOSIVE_DAMAGE_HEX 0}
			[/case]
		[/switch]
		[clear_variable]
			name=loc_store,unit_with_explosive,tmp_explosive_damage,tmp_explosive_attack_type
		[/clear_variable]
	[/event]
	[event]
		name=defender_hits
		first_time_only=no
		id=ROL_explosive_event
		[filter_second_attack]
			special=ROL_explosive
		[/filter_second_attack]
		[store_unit]
			variable=loc_store
			[filter]
				[filter_adjacent]
					x,y=$x2,$y2
				[/filter_adjacent]
				[filter_adjacent]
					x,y=$x1,$y1
				[/filter_adjacent]
			[/filter]
		[/store_unit]
		[store_unit]
			variable=unit_with_explosive
			[filter]
				id=$second_unit.id
			[/filter]
		[/store_unit]
		# Grab the attack's raw power and attack type - same here
		{VARIABLE tmp_explosive_damage $second_weapon.damage}
		{VARIABLE tmp_explosive_attack_type $second_weapon.type}
		# Divide by three; four if the user is slowed
		[if]
			[variable]
				name=unit_with_explosive.status.slowed
				equals=yes
			[/variable]
			[then]
				[set_variable]
					name=tmp_explosive_damage
					divide=4
				[/set_variable]
			[/then]
			[else]
				[set_variable]
					name=tmp_explosive_damage
					divide=3
				[/set_variable]
			[/else]
		[/if]
		# Round down
		[set_variable]
			name=tmp_explosive_damage
			round=floor
		[/set_variable]
		# Deal the damage
		[switch]
			variable=loc_store.length
			[case]
				value=1
				{EXPLOSIVE_DAMAGE_HEX 0}
			[/case]
			[case]
				value=2
				{EXPLOSIVE_DAMAGE_HEX 1}
				{EXPLOSIVE_DAMAGE_HEX 0}
			[/case]
		[/switch]
		[clear_variable]
			name=loc_store,unit_with_explosive,tmp_explosive_damage,tmp_explosive_attack_type_type
		[/clear_variable]
	[/event]
[+attack]
[+specials]
#enddef

	# store the 
#define EXPLOSIVE_DAMAGE_HEX NUMBER
    [store_unit]
        [filter]
            x=$loc_store[{NUMBER}].x
            y=$loc_store[{NUMBER}].y
        [/filter]
        kill=no
        variable=explosive_defender_store
    [/store_unit]
	# if the defender is not petrified
    [if]
        [variable]
            name=explosive_defender_store.status.petrified
            not_equals=yes
        [/variable]
        [then]
			# if the defender has an allied ressurector
            [if]
                [have_unit]
                    find_in=explosive_defender_store
                    [filter_adjacent]
                        is_enemy=no
						[and]
							ability=exi_resurrects
							[or]
								ability=exi_resurrects_pirl
							[/or]
						[/and]
                    [/filter_adjacent]
                [/have_unit]
                [then]
					# then store the defender to be ressurected
                    [store_unit]
                        [filter]
                            x=$loc_store[{NUMBER}].x
                            y=$loc_store[{NUMBER}].y
                        [/filter]
                        kill=no
                        variable=awakememo2
                    [/store_unit]
					
					# if the unit has 1 hitpoint then do nothing
					[if]
						[variable]
							name=awakememo2.hitpoints
							equals=1
						[/variable]
						[else]
							# otherwise if the unit has died ressurect them with 1 hitpoint
							[if]
								[variable]
									name=awakememo2.hitpoints
									less_than_equal_to=0
								[/variable]
								[then]
									{VARIABLE awakememo2.hitpoints 1}
									[if]
										[variable]
											name=awakememo2.gender
											equals=female
										[/variable]
										[then]
											[unstore_unit]
												variable=awakememo2
												find_vacant=no
												text= _ "resurrected"
												{COLOR_HEAL}
											[/unstore_unit]
										[/then]
										[else]
											[unstore_unit]
												variable=awakememo2
												find_vacant=no
												text= _ "resurrected"
												{COLOR_HEAL}
											[/unstore_unit]
										[/else]
									[/if]
								[/then]
							[/if]
						[/else]
					[/if]
                [/then]
                [else]
                    {CLEAR_VARIABLE awakememo2}
                [/else]
            [/if]
			# harm the defender
            [harm_unit]
                [filter]
                    x=$explosive_defender_store.x
                    y=$explosive_defender_store.y
					[filter_side]
						[enemy_of]
							side=$unit.side
						[/enemy_of]
					[/filter_side]
                [/filter]
                amount=$tmp_explosive_damage
                alignment=$unit_with_explosive.alignment
                damage_type=$tmp_explosive_attack_type
                kill=yes
                fire_event=yes
                animate=yes
            [/harm_unit]
			# if the defend has died then give you experience
            [if]
                [have_unit]
                    x=$explosive_defender_store.x
                    y=$explosive_defender_store.y
                [/have_unit]
                [else]
                    {VARIABLE gimmexp $explosive_defender_store[$i].level}
                    {VARIABLE_OP gimmexp multiply 8}
                    {VARIABLE_OP unit.experience add $gimmexp}
                    {CLEAR_VARIABLE gimmexp}
                    [unstore_unit]
                        variable=unit
                        find_vacant=no
                    [/unstore_unit]
                [/else]
            [/if]
        [/then]
    [/if]
    [clear_variable]
        name=explosive_defender_store
    [/clear_variable]
#enddef


#define WEAPON_SPECIAL_MIND_CONTROL TYPE
[heals]
      name= _ "mind control"
      description= _ "A hit with the Mind Control attack causes the victim to temporarily go under the control of the attacking side until that side's turn is over. The unit under Mind Control has 1 movement point and can attack."
[/heals]
[/abilities]
    [event]
        name=attacker_hits
        first_time_only=no

        [filter]
            type={TYPE}
        [/filter]

        [special_filter]
            weapon=chaos
        [/special_filter]

        {STORE_UNIT_VAR x,y=$x1,$y1 side charmer_side}
        {STORE_UNIT_VAR x,y=$x2,$y2 side charmed_side}

        {IF charmer_side not_equals $charmed_side (
            [then]
                {MODIFY_UNIT x,y=$x2,$y2 variables.real_side $charmed_side}
                {MODIFY_UNIT x,y=$x2,$y2 side $charmer_side}
                {MODIFY_UNIT x,y=$x2,$y2 moves 1}
                {MODIFY_UNIT x,y=$x2,$y2 attacks_left 1}

                {VARIABLE_OP varname format "side_$charmed_side|_units_charmed"}
                {VARIABLE $varname yes}

                {CLEAR_VARIABLE varname}
            [/then]
        )}

        {CLEAR_VARIABLE charmer_side}
        {CLEAR_VARIABLE charmed_side}
    [/event]

    [event]
        name=side turn
        first_time_only=no
	
        {VARIABLE_OP this_side_charmed to_variable "side_$side_number|_units_charmed"}

        {IF this_side_charmed equals yes (
            [then]
                [store_unit]
                    [filter]
                        [not]
                            side=$side_number
                        [/not]
                    [/filter]

                    variable=possibly_charmed
                    kill=no
                [/store_unit]

                {FOREACH possibly_charmed i}
                    {VARIABLE_OP real_side format "0$possibly_charmed[$i].variables.real_side"}

                    {IF real_side not_equals "0" (
                        [then]
                             {IF side_number numerical_equals $real_side (
                                [then]
                                    {CLEAR_VARIABLE possibly_charmed[$i].variables.real_side}
                                    {VARIABLE possibly_charmed[$i].side $side_number}

                                    [unstore_unit]
                                        variable=possibly_charmed[$i]
                                        find_vacant=no
                                    [/unstore_unit]
                                [/then]
                            )}
                        [/then]
                    )}
                {NEXT i}

                {CLEAR_VARIABLE possibly_charmed}
            [/then]
        )}
    [/event]
[+abilities]
#enddef

#define WEAPON_SPECIAL_CEASELESS
    [dummy]
        id=ROLceaseless
        name= _ "ceaseless"
        description="The ceaseless weapon special allows a unit to attack more than once with the weapon."
    [/dummy]
[/specials]
[/attack]
[event]
    name=side turn
    first_time_only=no
	id=ROLceaseless_event_1
	[filter_attack]
		special="ceaseless"
	[/filter_attack]   
    [store_unit]
        variable=ceaseless_unit_store
		mode=append
    [/store_unit]
	
    {FOREACH ceaseless_unit_store i}
        [if]
            [variable]
                name=ceaseless_unit_store[$i].variables.ceaseless_attacked
                boolean_equals=yes
            [/variable]
            [then]
                {FOREACH ceaseless_unit_store[$i].attack j}
					{VARIABLE ceaseless_variable 0}
					{FOREACH ceaseless_unit_store[$i].attack[$j].specials.dummy k}
						[if]
							[variable]
								name=ceaseless_unit_store[$i].attack[$j].specials.dummy[$k].id
								not_equals="ceaseless"
							[/variable]
							[then]
							[/then]
							[else]
								{VARIABLE_OP ceaseless_variable add 1}
							[/else]
						[/if]
					{NEXT k}
					[if]
						[variable]
							name="ceaseless_variable"
							equals=0
						[/variable]
						[then]
							[set_variable]
								name=ceaseless_unit_store[$i].attack[$j].attack_weight
								add=1
							[/set_variable]
						[/then]
					[/if]
                {NEXT j}
                [set_variable]
                    name=ceaseless_unit_store[$i].variables.ceaseless_attacked
                    value=no
                [/set_variable]
                [unstore_unit]
                    variable=ceaseless_unit_store[$i]
                [/unstore_unit]
            [/then]
        [/if]
    {NEXT i}
[/event]
[event]
    name=attack_end
    first_time_only=no
	id=ROLceaseless_event_2
    [filter_attack]
        special="ceaseless"
    [/filter_attack]
    [store_unit]
        [filter]
            id=$unit.id
        [/filter]
        variable=tmp_ceaseless_unit_store
    [/store_unit]
    [if]
        [variable]
            name=tmp_ceaseless_unit_store.variables.ceaseless_attacked
            boolean_not_equals=yes
        [/variable]
        [then]
            {CEASELESS_SECOND_ATTACK}
        [/then]
        [else]
            [if]
                [variable]
                    name=tmp_ceaseless_unit_store.variables.ceaseless_turn
                    not_equals=$turn_number
                [/variable]

                [then]
                    {CEASELESS_SECOND_ATTACK}
                [/then]
            [/if]
        [/else]
    [/if]
[/event]
[event]
    name=victory
	id=ROLceaseless_event_3
    [clear_variable]
        name=tmp_ceaseless_unit_store,ceaseless_unit_store,ceaseless_variable,tmp_ceaseless_variable
    [/clear_variable]
[/event]
[+attack]
[+specials]
#enddef

#define CEASELESS_SECOND_ATTACK
    [set_variable]
        name=tmp_ceaseless_unit_store.attacks_left
        add=1
    [/set_variable]
    [if]
        [variable]
            name=tmp_ceaseless_unit_store.variables.ceaseless_attacked
            boolean_not_equals=yes
        [/variable]
        [then]
           {FOREACH tmp_ceaseless_unit_store.attack i}
		{VARIABLE tmp_ceaseless_variable 0}
				{FOREACH tmp_ceaseless_unit_store.attack[$i].specials.dummy k}
					[if]
						[variable]
							name=tmp_ceaseless_unit_store.attack[$i].specials.dummy[$k].id
							not_equals="ceaseless"
						[/variable]
						[then]
						[/then]
						[else]
							{VARIABLE_OP tmp_ceaseless_variable add 1}
						[/else]
					[/if]
				{NEXT k}
			[if]
				[variable]
					name="tmp_ceaseless_variable"
					equals=0
				[/variable]
				[then]
					[set_variable]
						name=tmp_ceaseless_unit_store.attack[$i].attack_weight
						value=0
					[/set_variable]
				[/then]
			[/if]
            {NEXT i}
        [/then]
    [/if]
    [set_variables]
        name=tmp_ceaseless_unit_store.variables
        mode=merge
        [value]
            ceaseless_attacked=yes
            ceaseless_turn=$turn_number
        [/value]
    [/set_variables]
    [unstore_unit]
        text= _ "second target"
        {COLOR_HEAL}
        variable=tmp_ceaseless_unit_store
    [/unstore_unit]
#enddef


#textdomain wesnoth-httt

# NOTE: This code is tailored for Li'sar in this campaign specifically, and will
# not work correctly elsewhere without modification.

#define ABILITY_ROTL_INITIATIVE
    [dummy]
        id=ROLinitiative
        name= _ "initiative"
        description= _ "All adjacent friendly units will strike first in melee combat, even when defending."
    [/dummy]
#enddef

#define SPECIAL_NOTES_INITIATIVE
_"This unit's grasp of melee tactics allows adjacent allies to strike the first blow even when defending."#enddef

#define INITIATIVE_OBJECT FILTER
    [object]
        silent=yes

        [filter]
            {FILTER}
        [/filter]

        [effect]
            apply_to=attack
            range=melee

            [set_specials]
                mode=append

                [firststrike]
                    id=initiative
                    name=""
                    description=""
                    [filter_self]
                        [filter_adjacent]
                            id="Li'sar"
                        [/filter_adjacent]
                    [/filter_self]
                [/firststrike]
            [/set_specials]
        [/effect]
    [/object]
#enddef

#define LACKS_INITIATIVE_FILTER
    side=1,2

    [filter_side]
        [allied_with]
            [has_unit]
                id="Li'sar"
            [/has_unit]
        [/allied_with]
    [/filter_side]

    [filter_wml]
        [attack]
            range=melee
        [/attack]
    [/filter_wml]

    [not]
        [filter_wml]
            [attack]
                range=melee
                [specials]
                    [firststrike]
                    [/firststrike]
                [/specials]
            [/attack]
        [/filter_wml]
    [/not]
#enddef

#define WEAPON_SPECIAL_ROTL_INITIATIVE_EVENTS
    [event]
        id=initiative_1
        name=prerecruit,prerecall
        first_time_only=no

        [filter]
            {LACKS_INITIATIVE_FILTER}
        [/filter]

        {INITIATIVE_OBJECT x,y=$x1,$y1}
    [/event]

    [event]
        id=initiative_2
        name=side 1 turn, side 2 turn
        first_time_only=no

        [store_unit]
            [filter]
                {LACKS_INITIATIVE_FILTER}
            [/filter]

            kill=no
            variable=units_lacking_initiative
        [/store_unit]

        [foreach]
            array=units_lacking_initiative
            [do]
                {INITIATIVE_OBJECT x,y=$this_item.x,$this_item.y}
            [/do]
        [/foreach]

        {CLEAR_VARIABLE units_lacking_initiative}
    [/event]

    [event]
        id=initiative_3
        name=attack
        first_time_only=no

        [filter_second]
            {LACKS_INITIATIVE_FILTER}
        [/filter_second]

        {INITIATIVE_OBJECT x,y=$x2,$y2}
    [/event]
#enddef
