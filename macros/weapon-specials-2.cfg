# i8 grenade
# mind raid
# trap
# ensnare
# trample

#define ROLDAMAGE_HEX NO DMG SIDE
    [store_unit]
        [filter]
            x=$loc_store[{NO}].x
            y=$loc_store[{NO}].y
        [/filter]
        kill=no
        variable=mhd_store
    [/store_unit]
    [if]
        [have_unit]
            find_in=mhd_store
            [filter_adjacent]
                is_enemy=no
                ability=i8awake
            [/filter_adjacent]
        [/have_unit]
        [then]
            [store_unit]
                [filter]
                    x=$loc_store[{NO}].x
                    y=$loc_store[{NO}].y
                [/filter]
                kill=no
                variable=candidate.a
            [/store_unit]
        [/then]
    [/if]
    [if]
        [variable]
            name=mhd_store.hitpoints
            less_than_equal_to={DMG}
        [/variable]
        [then]
            [if]
                [have_unit]
                    x=$loc_store[{NO}].x
                    y=$loc_store[{NO}].y
                [/have_unit]
                [then]
                    [unstore_unit]
                        variable=mhd_store
                        {COLOR_HARM}
                        text="{DMG}"
                    [/unstore_unit]
                    [kill]
                        x=$loc_store[{NO}].x
                        y=$loc_store[{NO}].y
                        fire_event=yes
                        animate=yes
                    [/kill]
                [/then]
            [/if]
        [/then]
        [else]
            {VARIABLE dmgpuffer {DMG}}
            {VARIABLE_OP dmgpuffer multiply -1}
            {VARIABLE_OP mhd_store.hitpoints add $dmgpuffer}
            [unstore_unit]
                variable=mhd_store
                {COLOR_HARM}
                text="{DMG}"
            [/unstore_unit]
        [/else]
    [/if]
#enddef

#define WEAPON_SPECIAL_I8GRENADE ATTACK_NAME
    [damage]
        id=ROLi8grenade
        name= _ "grenade"
        name_inactive= _ "grenade"
        description= _ "When this attack is used, all units adjecent to a target get damage. Does not work on defense."
        description_inactive= _ "When this attack is used, all units adjecent to a target get damage. Does not work on defense."
    [/damage]
[/specials]
[/attack]

    [event]
        name=attacker_hits
        first_time_only=no
        [filter_attack]
            name={ATTACK_NAME}
        [/filter_attack]

	{STORE_UNIT_VAR x,y=$x1,$y1 side attacker_side}

        [store_locations]
            x=$x1
            y=$y1
            variable=loc_store
            radius=1
        [/store_locations]
        {ROLDAMAGE_HEX 2 5 $attacker_side}
        {ROLDAMAGE_HEX 5 5 $attacker_side}
        {ROLDAMAGE_HEX 6 5 $attacker_side}
        {ROLDAMAGE_HEX 4 5 $attacker_side}
        {ROLDAMAGE_HEX 1 5 $attacker_side}
        {ROLDAMAGE_HEX 0 5 $attacker_side}
        {CLEAR_VARIABLE loc_store}
    [/event]
[+attack]
[+specials]
#enddef

#define ROL_IF VAR OP VAL CONTENTS
    [if]
        [variable]
            name={VAR}
            {OP}={VAL}
        [/variable]

        {CONTENTS}
    [/if]
#enddef

#define PICTURE_HIT UNIT TEXT FILTER COLORRGB
                [unstore_unit]
		    # puts text on second_unit or unit
                    variable={UNIT}
                    find_vacant=no
                    text= _ "{TEXT}"
                    red,green,blue={COLORRGB}
                [/unstore_unit]

                [object]
                    silent=yes
                    duration=scenario

                    [filter]
                        {FILTER}
                    [/filter]

                    [effect]
                        apply_to=image_mod
                        replace="CS({COLORRGB})"
                    [/effect]
                [/object]

		[delay]
		    time=100
		[/delay]

                [object]
                    silent=yes
                    duration=scenario

                    [filter]
                        {FILTER}
                    [/filter]

                    [effect]
                    	apply_to=image_mod
                    	replace="NOP()"
                    [/effect]
                [/object]
#enddef

#define WEAPON_SPECIAL_MIND_RAID NUMBER
[heals]
	  id=ROLmindraider
      name= _ "mind raid"
      description= _ "The Mind Raid ability takes away 2 * {NUMBER} exp from the defender on each successful hit and gives it to the attacker."
[/heals]
[/specials]
[/attack]
	{MIND_RAID_EVENT {NUMBER}}
[+attack]
[+specials]
#enddef

#define MIND_RAID_EVENT NUMBER
	[event]
		name=attack
		first_time_only=no

		[filter_attack]
			special=ROLmindraider
		[/filter_attack]

		{VARIABLE hit_number 0}
	[/event]
	[event]
		name=attacker_hits
		first_time_only=no

		[filter_attack]
			special=ROLmindraider
		[/filter_attack]

		{VARIABLE_OP hit_number add 1}
		{VARIABLE secondid $second_unit.id}
	[/event]
	[event]
		name=attack_end
		first_time_only=no

		[filter_attack]
			special=ROLmindraider
		[/filter_attack]

		# stores attack and defenders xp
		{STORE_UNIT_VAR x,y=$x1,$y1 experience attacker_xp}
		{STORE_UNIT_VAR x,y=$x2,$y2 experience defender_xp}

		{VARIABLE initial_defender_xp $defender_xp}
		{VARIABLE xploss 0}

		# doubles the hit number so it now is the amount that will be added or removed from the units xp
		{VARIABLE_OP hit_number multiply {NUMBER}}
		{VARIABLE_OP attacker_xp add "$hit_number"}
		{VARIABLE_OP hit_number multiply -1}
		{VARIABLE_OP defender_xp add "$hit_number"}

		{VARIABLE_OP xploss add "$hit_number"}


		#if the defender has less experience then the attackers level negatived then when the attack finishes and it gains that experience
		#it will still be less then 0 and so a problem
		{ROL_IF defender_xp less_than 0 (
			[then]

				#take the amount the defender is negative back away from the attacker (its not allowed that part)
				{VARIABLE_OP attacker_xp add "$defender_xp"}

				{VARIABLE_OP xploss add "-$defender_xp"}

				#then put defender at 0 cause cant get less than 0
				{VARIABLE_OP defender_xp value 0}
			[/then]
		)}

		# if the guys not dead show the missing xp
		[if]
			[have_unit]
				x,y=$x2,$y2
			[/have_unit]
			[then]
				#change the defender to now have the new experience number
				{MODIFY_UNIT x,y=$x2,$y2 experience "$defender_xp"}

				{ROL_IF initial_defender_xp greater_than $defender_xp (

					[then] 
						{VARIABLE_OP initial_defender_xp add "$defender_xp"}
						#only if u actaully steal does it print numbers
						{PICTURE_HIT (second_unit) (XP $xploss) (id=$secondid) (200,200,200)}
					[/then]
				)}
			[/then]
		[/if]
		
		#change the attacker to have the new experience number
		{MODIFY_UNIT x,y=$x1,$y1 experience "$attacker_xp"}

		{CLEAR_VARIABLE hit_number}
		{CLEAR_VARIABLE initial_defender_xp}
		{CLEAR_VARIABLE secondid}
		{CLEAR_VARIABLE xploss}
		{CLEAR_VARIABLE attacker_xp}
		{CLEAR_VARIABLE defender_xp}
	[/event]
#enddef

#define SPECIAL_NOTES_TRAP
    _"This unit has attack that trap. When an enemy is trapped it cannot move. This unit can trap enemies for 2 turns."#enddef

#define WEAPON_SPECIAL_TRAP UNIT WEAPON
   [dummy]
      id=ROL_trap
      name= _ "trap"
      description= _ "When this attacker hits the defender is trapped and it can not move but can still attack units adjacent to it. The effect wears off after two turns."
   [/dummy]
[/specials]
[/attack]
[event]
    name=turn refresh
    #first_time_only=no

    [lua]
        code=<<
            local _ = wesnoth.textdomain "wesnoth-ROTL"
            local old_unit_status = wesnoth.theme_items.unit_status
            function wesnoth.theme_items.unit_status()
                local u = wesnoth.get_displayed_unit()
                if not u then return {} end
                local s = old_unit_status()
                if u.status.ROTLtrapped then
                    table.insert(s, { "element", {
                        image = "misc/cage-status.png",
                        tooltip = _"trapped: This unit is trapped. Units that are trapped may not move but may attack units in any adjacent spaces. The effect wears off after two turns."
                    } })
                end
                return s
            end
        >>
    [/lua]
[/event]
    [event]
        name=attacker_hits
        first_time_only=no


	[filter]
	   type={UNIT}
	[/filter]

        [filter_attack]
	    name={WEAPON}
            specials=ROL_trap
        [/filter_attack]

        [filter_second]
            [not]
                level=0
            [/not]
        [/filter_second]

        [if]
            [variable]
                name=second_unit.variables.trapped
                boolean_equals=no
            [/variable]
            [then]
                {VARIABLE second_unit.variables.trapped yes}
		{VARIABLE second_unit.status.ROTLtrapped yes}
		[store_unit]
		    [filter]
		    	id=$second_unit.id
		    [/filter]
		   variable=trapmentUnitToMoves
		[/store_unit]

                [if]
                    [variable]
                        name=second_unit.gender
                        equals=female
                    [/variable]

                    [then]
                        [set_variable]
                            name=tmp_trapped_text
                            value= _ "female^trapped"
                        [/set_variable]
                    [/then]

                    [else]
                        [set_variable]
                            name=tmp_trapped_text
                            value= _ "trapped"
                        [/set_variable]
                    [/else]
                [/if]

                [unstore_unit]
                    variable=second_unit
                    find_vacant=no
                    text=$tmp_trapped_text
                    red,green,blue=61,31,5
                [/unstore_unit]

                [object]
                    silent=yes
                    duration=scenario

                    [filter]
                        x,y=$x2,$y2
                    [/filter]

                    [effect]
                        apply_to=image_mod
                        replace="CS(61,31,5)"
                    [/effect]

                    [effect]
                        apply_to=movement
			set=0
                    [/effect]
                [/object]

                [clear_variable]
                    name=tmp_trapped_text
                [/clear_variable]
            [/then]
        [/if]
    [/event]

    [event]
        name=turn refresh
        first_time_only=no

	# All second turn trapped units go here
	# basically if there second turn trapped they will have trappedAction=yes
	# first it clears that then it fixes the units movement

        [store_unit]
            [filter]
                side=$side_number
                [filter_wml]
                    [variables]
                        trappedAction=yes
                    [/variables]
                [/filter_wml]
            [/filter]
            variable=trapped
        [/store_unit]

        {FOREACH trapped i}
	    {VARIABLE trapped[$i].variables.trappedAction no}
	    {VARIABLE trapped[$i].status.ROTLtrapped no}

            [unstore_unit]
                variable=trapped[$i]
            [/unstore_unit]

            [object]
                silent=yes
                duration=scenario

                [filter]
                    x,y=$trapped[$i].x,$trapped[$i].y
                [/filter]

                [effect]
                    apply_to=image_mod
                    replace="NOP()"
                [/effect]

                [effect]
                    apply_to=movement
                    set=$trapmentUnitToMoves.max_moves
                [/effect]

		#once its gotten that it can unstore that unit
        	[unstore_unit]
        	    variable=trapmentUnitToMoves[$i]
        	[/unstore_unit]
            [/object]

        {NEXT i}

	# once its done that its gone through all the trapped action units and fixed them so we now clear that variable
	{CLEAR_VARIABLE trappedAction}
	

	# trapped first refresh
	# so basically all first turn trapped units appear here (having the variable trapped=yes)
	# the variable is then set to trappedAction=yes

        [store_unit]
            [filter]
                side=$side_number
                [filter_wml]
                    [variables]
                        trapped=yes
                    [/variables]
                [/filter_wml]
            [/filter]
            variable=trappedT2
        [/store_unit]

        {FOREACH trappedT2 i}
	    {VARIABLE trappedT2[$i].variables.trapped no}	

	    {VARIABLE trappedT2[$i].variables.trappedAction yes}
            [unstore_unit]
                variable=trappedT2[$i]
            [/unstore_unit]

		# lighten the color of the unit
                [object]
                    silent=yes
                    duration=scenario

                    [filter]
                        x,y=$trappedT2[$i].x,$trappedT2[$i].y
                    [/filter]

                    [effect]
                        apply_to=image_mod
                        replace="CS(107,54,14)"
                    [/effect]
                [/object]

        {NEXT i}

	# once its done that its gone through all the trapped units and fixed them so we now clear that variable
	{CLEAR_VARIABLE trapped}

    [/event]
[+attack]
[+specials]
#enddef

#define ENSNARED_UNIT_CODE FIR_SEC_UNIT FILTER_X_Y
        [if]
            [variable]
                name={FIR_SEC_UNIT}.variables.ensnared
                boolean_equals=no
            [/variable]
            [then]
                {VARIABLE {FIR_SEC_UNIT}.variables.ensnared yes}
		{VARIABLE {FIR_SEC_UNIT}.status.ROTLensnared yes}
		[store_unit]
		    [filter]
		    	id=${FIR_SEC_UNIT}.id
		    [/filter]
		   variable=ensnaredUnitDefense
		[/store_unit]

                [if]
                    [variable]
                        name={FIR_SEC_UNIT}.gender
                        equals=female
                    [/variable]

                    [then]
                        [set_variable]
                            name=tmp_ensnared_text
                            value= _ "female^ensnared"
                        [/set_variable]
                    [/then]

                    [else]
                        [set_variable]
                            name=tmp_ensnared_text
                            value= _ "ensnared"
                        [/set_variable]
                    [/else]
                [/if]

		[delay]
		   time=200
		[/delay]

                [unstore_unit]
                    variable={FIR_SEC_UNIT}
                    find_vacant=no
                    text=$tmp_ensnared_text
                    red,green,blue=255,216,0
                [/unstore_unit]

                [unit_overlay]
                    x,y={FILTER_X_Y}
                    image=misc/web-overlay.png
                [/unit_overlay]

                [object]
                    silent=yes
                    duration=scenario

                    [filter]
                        x,y={FILTER_X_Y}
                    [/filter]

                    [effect]
                        apply_to=defense
			replace=yes
		      [defense]
			deep_water=90
        		shallow_water=90
        		swamp_water=90
        		reef=90
        		flat=90
        		sand=90
        		forest=90
        		hills=90
        		mountains=90
        		village=90
        		castle=90
        		cave=90
        		frozen=90
        		unwalkable=90
        		fungus=90
		      [/defense]
                    [/effect]
                [/object]

                [clear_variable]
                    name=tmp_ensnared_text
                [/clear_variable]
            [/then]
        [/if]
#enddef

#define SPECIAL_NOTES_ENSNARE
    _"This unit has attacks that ensnare. When an enemy is ensnared all its defenses become 10% making it an vanurable target. The effect wears off after 1 turn."#enddef

#define WEAPON_SPECIAL_ENSNARE UNIT ATTACK
   [dummy]
      id=ROL_ensnare
      name= _ "ensnare"
      description= _ "Units hit with this attack are ensnared and all defences become 10%. The effect wares off after one turn."
   [/dummy]
[/specials]
[/attack]
[event]
    name=turn refresh
    #first_time_only=no

    [lua]
        code=<<
            local _ = wesnoth.textdomain "wesnoth-ROTL"
            local old_unit_status = wesnoth.theme_items.unit_status
            function wesnoth.theme_items.unit_status()
                local u = wesnoth.get_displayed_unit()
                if not u then return {} end
                local s = old_unit_status()
                if u.status.ROTLensnared then
                    table.insert(s, { "element", {
                        image = "misc/web-status.png",
                        tooltip = _"ensnared: This unit is ensnared. Ensnared units' defenses are reduced to 10% making them vanurable to enemy attacks. Units remain ensnared for 1 round."
                    } })
                end
                return s
            end
        >>
    [/lua]
[/event]

    [event]
        name=attacker_hits
        first_time_only=no

	[filter]
	   type={UNIT}
	[/filter]

        [filter_attack]
	    name={ATTACK}
            specials=ROL_ensnare
        [/filter_attack]

	{ENSNARED_UNIT_CODE (second_unit) ($x2,$y2)}
    [/event]

    [event]
        name=defender_hits
        first_time_only=no

	[filter_second]
	   type={UNIT}
	[/filter_second]

        [filter_second_attack]
	    name={ATTACK}
            specials=ROL_ensnare
        [/filter_second_attack]

	{ENSNARED_UNIT_CODE (unit) ($x1,$y1)}
    [/event]

    [event]
        name=turn refresh
        first_time_only=no

        [store_unit]
            [filter]
                side=$side_number
                [filter_wml]
                    [variables]
                        ensnared=yes
                    [/variables]
                [/filter_wml]
            [/filter]
            variable=ensnared
        [/store_unit]

        {FOREACH ensnared i}
	    {VARIABLE ensnared[$i].variables.ensnared no}
	    {VARIABLE ensnared[$i].status.ROTLensnared no}

            [unstore_unit]
                variable=ensnared[$i]
            [/unstore_unit]

            [remove_unit_overlay]
                x,y=$ensnared[$i].x,$ensnared[$i].y
                image=misc/web-overlay.png
            [/remove_unit_overlay]

            [object]
                silent=yes
                duration=scenario

                [filter]
                    x,y=$ensnared[$i].x,$ensnared[$i].y
                [/filter]

                [effect]
                    apply_to=defense
                    replace=yes
		    [defense]
			mountains=$ensnaredUnitDefense.defense.mountains
			hills=$ensnaredUnitDefense.defense.hills
			deep_water=$ensnaredUnitDefense.defense.deep_water
        		shallow_water=$ensnaredUnitDefense.defense.shallow_water
        		swamp_water=$ensnaredUnitDefense.defense.swamp_water
        		reef=$ensnaredUnitDefense.defense.reef
        		flat=$ensnaredUnitDefense.defense.flat
        		sand=$ensnaredUnitDefense.defense.sand
        		forest=$ensnaredUnitDefense.defense.forest
        		village=$ensnaredUnitDefense.defense.village
        		castle=$ensnaredUnitDefense.defense.castle
        		cave=$ensnaredUnitDefense.defense.cave
        		frozen=$ensnaredUnitDefense.defense.frozen
        		unwalkable=$ensnaredUnitDefense.defense.unwalkable
        		fungus=$ensnaredUnitDefense.defense.fungus
		    [/defense]
                [/effect]

		#once its gotten that it can unstore that unit
        	[unstore_unit]
        	    variable=ensnaredUnitDefense[$i]
        	[/unstore_unit]
            [/object]

        {NEXT i}

	# once its done that its gone through all the ensnared units and fixed them so we now clear that variable
	{CLEAR_VARIABLE ensnared}

    [/event]
[+attack]
[+specials]
#enddef

#define SPECIAL_NOTES_TRAMPLE
    _"If the defender is killed it will move into their hex."#enddef

#define WEAPON_SPECIAL_TRAMPLE
    [dummy]
		id=ROLweapon_special_trample
		name= _ "trample"
        description= _ "On offense units with trample will move into the hex of the unit they killed."
        active_on=offense
    [/dummy]
[/specials]
[/attack]

[event]
     name=attacker hits
     first_time_only=no
     [filter_attack]
          special=ROLweapon_special_trample
     [/filter_attack]
     [if]
        [not]
          [have_unit]
               x,y=$x2,$y2
          [/have_unit]
        [/not]
        [then]
           [set_variable]
              name=experience_earned
              value=8
           [/set_variable]
           [if]
              [variable]
                 name=second_unit.level
                 not_equals=0
              [/variable]
              [then]
                 [set_variable]
                    name=experience_earned
                    multiply=$second_unit.level
                 [/set_variable]
              [/then]
              [else]
                 [set_variable]
                    name=experience_earned
                    value=4
                 [/set_variable]
              [/else]
           [/if]
           [kill]
               x,y=$x2,$y2
               fire_event=yes
               [secondary_unit]
                   x,y=$x1,$y1
               [/secondary_unit]
           [/kill]
           [store_unit]
               [filter]
                   x,y=$x1,$y1
               [/filter]
               kill=yes
               variable=trampler
           [/store_unit]
           {VARIABLE_OP trampler.experience add $experience_earned}
           [unstore_unit]
                 variable=trampler
                 x,y=$x2,$y2
           [/unstore_unit]
           [capture_village]
                 x,y=$x2,$y2
                 side=$trampler.side
           [/capture_village]
           {CLEAR_VARIABLE experience_earned}
        [/then]
     [/if]
[/event]
[+attack]
[+specials]
#enddef